# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DigIk4mBv7-rL8FsWDhECIIw5P9t_sSQ
"""

!pip install fastapi
from fastapi import FastAPI, HTTPException
import requests
from pydantic import BaseModel
from typing import Dict, Any

# Initialize FastAPI app
app = FastAPI()

# Configuration
GEMINI_API_URL = "https://gemini-flash-api.com/query"  # Replace with actual API endpoint
API_KEY = "your_api_key_here"  # Replace with your Google Gemini Flash API key

# Request model
class VehicleQuery(BaseModel):
    query: str

# Cache to store frequent results (Simple dictionary caching)
cached_results: Dict[str, Any] = {}

@app.post("/search")
def search_vehicle(data: VehicleQuery):
    query = data.query.lower()

    # Return cached response if available
    if query in cached_results:
        return {"source": "cache", "data": cached_results[query]}

    # Call Gemini Flash API
    try:
        response = requests.post(GEMINI_API_URL, json={"query": query}, headers={"Authorization": f"Bearer {API_KEY}"})
        response.raise_for_status()

        result = response.json()
        cached_results[query] = result  # Store result in cache

        return {"source": "api", "data": result}
    except requests.exceptions.RequestException as e:
        raise HTTPException(status_code=500, detail=str(e))